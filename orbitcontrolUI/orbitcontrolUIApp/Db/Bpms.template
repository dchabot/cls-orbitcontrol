### NOTE: although we've specified "NO CONVERSION" for BPM$(p):x and BPM$(p):y
### record instances, we're going to abuse the engineering slope (ESLO) field
### by using it to control the Volts/mm conversion factor for each BPM object (see Bpm.h)
### Note also that we can't use ASLO or others here, as process() will alter VAL 
### using ASLO even if LINR="NO CONVERSION" (see aiRecord.c, special()).

record(ai, "BPM$(clsName):x") {
	field(DTYP, "BPM AnalogIn")
	field(INP, "@xval $(ringOrder)")
	field(SCAN, "Event")
	field(EVNT, "$(bpmChangeEvent)")
	field(PRIO, "HIGH")
	field(HIHI, "$(hhiLimit)")
	field(HIGH, "$(hiLimit)")
	field(LOW,  "$(lowLimit)")
	field(LOLO, "$(llowLimit)")
	field(EGU, "m")
	field(LINR, "NO CONVERSION")
	field(ESLO, "$(x-voltsPerMilli)")
}

record(ai, "BPM$(clsName):y") {
	field(DTYP, "BPM AnalogIn")
	field(INP, "@yval $(ringOrder)")
	field(SCAN, "Event")
	field(EVNT, "$(bpmChangeEvent)")
	field(PRIO, "HIGH")
	field(HIHI, "$(hhiLimit)")
	field(HIGH, "$(hiLimit)")
	field(LOW,  "$(lowLimit)")
	field(LOLO, "$(llowLimit)")
	field(EGU, "m")
	field(LINR, "NO CONVERSION")
	field(ESLO, "$(y-voltsPerMilli)")
}

record(ai, "BPM$(clsName):x:sigma") {
	field(DTYP, "BPM AnalogIn")
	field(INP, "@xsigma $(ringOrder)")
	field(SCAN, "Event")
	field(EVNT, "$(bpmChangeEvent)")
	field(PRIO, "HIGH")
	field(EGU, "m")
}

record(ai, "BPM$(clsName):y:sigma") {
	field(DTYP, "BPM AnalogIn")
	field(INP, "@ysigma $(ringOrder)")
	field(SCAN, "Event")
	field(EVNT, "$(bpmChangeEvent)")
	field(PRIO, "HIGH")
	field(EGU, "m")
}

record(ao, "BPM$(clsName):x:reference") {
	field(DTYP, "BPM AnalogOut")
	field(OMSL, "supervisory")
	field(DOL, "0")
	field(OUT, "@xreference $(ringOrder)")
	field(EGU, "m")
}

record(ao, "BPM$(clsName):y:reference") {
	field(DTYP, "BPM AnalogOut")
	field(OMSL, "supervisory")
	field(DOL, "0")
	field(OUT, "@yreference $(ringOrder)")
	field(EGU, "m")
}

record(ao, "BPM$(clsName):x:offset") {
	field(DTYP, "BPM AnalogOut")
	field(OMSL, "supervisory")
	field(DOL, "0")
	field(OUT, "@xoffset $(ringOrder)")
	field(EGU, "m")
}

record(ao, "BPM$(clsName):y:offset") {
	field(DTYP, "BPM AnalogOut")
	field(OMSL, "supervisory")
	field(DOL, "0")
	field(OUT, "@yoffset $(ringOrder)")
	field(EGU, "m")
}

record(bo, "BPM$(clsName):isInCorrection") {
	field(DTYP, "BPM BinaryOut")
	field(OMSL, "supervisory")
	field(DOL, "$(isInCorrection)")
	field(OUT, "@FOO $(ringOrder)")
	field(ZNAM, "False")
	field(ONAM, "True")
}
