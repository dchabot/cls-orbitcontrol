= CLS Orbit Control Notes =
:author: Daron_Chabot
:email: dchabot@bnl.gov
:date: Sept 2009

_This document examines the 3^rd^-generation of the CLS' orbit control
system, implementing so-called fast corrections on the order of 100 Hz.
The 2^nd^-generation system is documented in, "SR1 Orbit Control Design
Note - 5.2.39.4- Rev 0". That document should also be consulted, as its
contents are still relevent,
<http://www.lightsource.ca/operations/pdf/5.2.39.4.Rev.0-SR1_Orbit_Control_Design_Note-Chabot.pdf>_.
 
== Project Source Structure ==
The source code for this project has the following layout:
--------------------------------------------------
project-root/
            .hg/                # Mercurial repo. Contains complete history of project.
            docs/
            orbitcontroller/    # root of the base, RTEMS OrbitController application
                include/
                src/
                    hardware/
                    main/
                    states/
                    test/
                    utils/
            orbitcontrolUI/     # root of the EPICS-based user interface (UI)
                configure/
                iocBoot/
                orbitcontrolUIApp/
                    Db/
                    src/
                orbitcontrolUI.cmd # start-up script 
--------------------------------------------------

== Required Tools ==
* RTEMS CVS development HEAD. The development HEAD is the RTEMS version 
that would be released as version 4.10. This branch contains the important 
addition to the i386-rtems architecture of PCI _interrupt sharing_. There
are also other features available in RTEMS 4.9 and later revisions that are
utilized in the orbit control software (eg: RTEMS _thread barriers_).

* The cross-development toolchain associated with RTEMS CVS HEAD
(Current at the time of last modifications to the project. These are now
somewhat outdated):
** binutils-2.19.1
** gcc-4.3.3
** newlib-1.17
** gdb-6.8

NOTE: The toolchain components can be installed via YUM and RPM, see
<http://www.rtems.com/wiki/index.php/APT/Yum_Repository> for more information.
The tools may also be built from source. The tools' sources and patches are 
available from <http://www.rtems.com/ftp/pub/rtems/SOURCES>. Alternatively, 
a pre-built set of tools and RTEMS libraries is available (Dave Beauregard).

* SIS1100/3100 RTEMS Driver
** This is available in the MKS repository (repo).

* SLAC RTEMS Tools
** These can be found at 
http://www.slac.stanford.edu/~strauman/rtems/software.html#RTEMS .
** cexp-1.6
** GeSys-2.1
** telnetd-1.2
** rtems-gdb-stub-1.4

* EPICS version 3.14.10. However this is not a _strict_ requirement. The
EPICS components of the system (source under orbitcontrolUI/) do not depend
on any particular feature of EPICS Base found in versions later than 3.14.6.
Having explained that, modifications to the _build system_ of EPICS Base
_were necessary_, thus the decision to use a developer-local copy of Base,
thereby avoiding contamination of the standard CLS Base installation. The 
modifications are discussed below, and the simple patch to illicit the
altered behavior from EPICS Base is available in Appendix <<A>>.
**  Changes are required to +orbitcontrolUI/configure/RELEASE+. In 
particular, the value of EPICS_BASE will need to be modified to suit.
** The call to +osdTimeRegister()+, in "orbitcontrolUI.cmd" was necessary
for successful operation under Base 3.14.10. This call may be safely omitted
if it is desired to use a version of Base < 3.14.10.
** In order to coax EPICS' build system into generating "loadable 
modules" instead of statically-linked executables, modifications to that 
system are required. See patch in Appendix <<A>>. Specifically, a 
+USE_GESYS+ Makefile variable was introduced to instruct EPICS' build 
system to produce either loadable modules _or_ the traditional, 
statically-linked RTEMS exectuable image. From the root of the 
EPICS-based UI application (+orbitcontrolUI+), invoking +Make+ as
follows will produce a dynamically loadable module:
-----------------------------------------------------------
make USE_GESYS=YES 
-----------------------------------------------------------

* The Mercurial distributed version control software (DVCS) was used for 
fine-grained changeset management. _All_ revisions are contained in the ".hg/"
directory that accompanies the MKS project associated with the 3rd generation
orbit control software system. Therefore, this "hidden" directory should also
be checked out of MKS, in addition to all other relevant sources	.
** The latest version in MKS (assuming no one has worked on the source since
the end of April/09) corresponds to the Mercurial version tagged as 
+v3.0.1+. This version was the last to be tested on production hardware on
March 16/09.
** Mercurial version 5.0.1 is the latest version of the software, exercised
only on the test-bench setup (i.e. _ioc1009-109_). This version features a
significant re-factoring of those classes involved with the power-supplies.
This version _has not been tested on production systems and should only be
utilized after proper vetting_. See *Future Work*, below, for further details.

NOTE: It must be realized that the _entire revision history_, from the
deployed 2^nd^ generation system to the experimental 3^rd^ generation system,
is captured in and accessible from the Mercurial system *_only_*. Thus, even 
though the Mercurial repo is preserved in MKS, it would be beneficial to 
continue using +hg+ for day-to-day changeset management and developer
interaction, and use MKS _only_ to capture significant milestones in
the project's progression.

== Deployment and Testing Infrastructure ==
The following are key pieces of physical and filesystem infrastructure
supporting the OrbitController system:

* *ioc1009-109*: test-bench RTEMS IOC
* */export/tftpboot/epics/IOC1009-109*: location of test-bench generic RTEMS
system (GeSys) and startup script (st.sys). The orbitcontroller and 
orbitcontrolUI binaries can be served from the developers' +srv-unix+
home directory, as these are NFS exported shares.
* *css2400-106*: syslog server (ioc1009-109 console messages and status).
* *ioc2400-104*: production RTEMS IOC
* *ioc2400-109*: production Linux soft-IOC.

NOTE: in the 3^rd^-generation system, *ioc2400-109* _plays no role 
whatsoever_. In fact, the softIoc running on it as part of the 2^nd^
generation system *_must be killed_* prior to executing the 3^rd^
generation OrbitController.

* */iocApps/SR/ioc2400-104*: location of production orbitcontroller and 
orbitcontrolUI binaries.
* */export/tftpboot/epics/IOC2400-104*: location of production generic RTEMS
system (GeSys) and startup script (st.sys). 
* *css1021-102*: syslog server (ioc2400-104 console messages and status). 

== Modifications Required for New Power-Supply Hardware ==
Once the new, so-called "_fast_" power-supply controllers are in place for
the sextupole magnets, several changes are required to supporting software.
While the alterations necessary for the 3^rd^-generation system are small,
they will require re-compiling the +orbitcontroller+ software, and editing
several _substitution_ files in the +orbitcontrolUI+ portion of the system.
However, there are extensive changes required to the out-of-scope software 
responsible for serial communication with the power-supply controller 
channels for the sextupoles. The modifications to both the OrbitController
and external software software systems are detailed in the following 
sections.

=== Modifications to External Software ===
Currently, the communication media between power-supply controllers and the
software responsible for that communication is _highly assymetric_: the 
orbit-corrector magnet channels (aka _fast_ channels) receive their setpoints
from VME digital I/O modules (VMIC-2536 modules), and those same channels
are polled for feedback values over slow RS-232 serial lines. To confuse
matters even more, the communication channels to the sextupole power-supplies
are exclusively serial-based.

Work is planned for the Fall of 2009 to install a VME-based 
setpoint-delivery interface for the sextupole control channels. Once this VME
interface is in place, the IOCs responsible for the serial-communication and
control will need to be re-structured such that their functional domain is
limited to _gathering channel feedback values only_. Glen Wright and Neil
Johnson should be consulted on this matter for further details.

=== Modifications to the OrbitControl App ===

[[constants]]
==== Altering Compile-Time Constants ====

The number of orbit-control magnet (OCM) objects is currently defined in 
software as a preprocessor (compile-time) variable. To reflect the 
increased number of OCM channels introduced to the OrbitController's domain
as part of the hardware upgrades, the definition of +NumOcm+ must be changed
to follow suit (see _orbitcontroller/include/Ocm.h_).

+NumOcm+ is used to derive +NumHOcm+ and +NumVOcm+, the number of 
horizontal and vertical corrector channels, respectively. These variables
are utilized primarily as bounds on looping operations over various
containers. In particular, the dimensions of the (inverse) Response Matrices
for each plane are partially determined by these parameters. Since the user 
interface (i.e. EPICS records) will create one +Ocm+ object per record, 
_it is possibleto do away entirely with the compile-time variables_, 
as the number of +Ocm+ objects will be implicitly given by the number 
that are created and stored in their respective containers. This approach 
will also permit the use of dynamically sized arrays, instead of fixed-size
arrays. For example:

----------------------------------------------------
double hmat[NumHOcm][NumBpm];
double vmat[NumVOcm][NumBpm];
----------------------------------------------------

could then become:

----------------------------------------------------
vector<vector<double> > hmat;
vector<vector<double> > vmat;
----------------------------------------------------

with the dimensions given by:
----------------------------------------------------
PowerSupplyController::hocm.size();
OrbitController::bpmMap.size();
----------------------------------------------------

==== Altering EPICS Database Substitution Files ====
Changes must also be to the control system interface of the project, found
under _orbitcontrolUI/_. These changes are somewhat less obtrusive than 
those required to the source under _orbitcontroller/_, as in this case only
EPICS database substitution files must be modified. In particular, this 
affects files of the form _Ocm24*.sub_ under 
_orbitcontrolUI/orbitcontrolUIApp/Db_.

The substitution file-fields that need to be modified are:

. *vmeBaseAddr*: base address of the VME digital I/O (DIO) modules, model
VMIC-2536, responsible for communicating setpoints to power-supply controllers. 
. *channel*: the channel of the power-supply controller corresponding
to an individual OCM. The VME DIO modules encode the channel number in their
interactions with the power-supply controllers.
. *ringOrder*: a number representing _where_ in the geographical sequence 
(lattice) of magnets a particular OCM is situated. The +OrbitController+
class uses the +ringOrder+ to sort +Ocm+ objects in their containers. This
is necessary, as the Response Matrix elements are also sorted in "_ring 
order_".

NOTE: Two additional sources of *very important* information may be found
in the files, +orbitcontrolUI/README.1st+, and 
+orbitcontrolUI/orbitcontrolUIApp/Db/README.OCM.ringOrder+. Also, the
Engineering Notebooks of the author will also be a good source of 
information on this matter, as would Neil Johnson.

== Operational Considerations ==
From an operational perspective, the function of the 3^rd^-generation
OrbitController is relatively transparent. A new, simplified MatLab GUI
was constructed, and it is this client that contains the logic for 
interacting with the latest control-system software. In fact, the older
program, +clsorb+, may still be utilized _in parallel_ with the new system.
This configuration permits "slow" control over those magnet power-supplies
which require it, while the newer program serves as the interface to affect
the "fast" corrections. From the perspective of the orbit-control software,
the new GUI simply serves to populate the +waveform+ process-variable 
representations of the inverted Response Matrices, as well as affect 
state-transitions of the OrbitController.

NOTE: Tasha Summers should be consulted for further details regarding the 
MatLab interface to the orbit-control system.

== Design Notes ==

=== Overview === 

Conceptually, the orbit-control system is simply those system components 
acting in concert to physically apply periodic solutions to the linear 
equation:

- *latexmath:[$\Delta \theta_x = R^{-1}\Delta x$]* 

where, *latexmath:[$\Delta \theta_x$]* is the vector of horizontal orbit
angular deflections (linearly related to the current through the 
corresponding power-supply channel), *latexmath:[$R^{-1}$]* is the inverted
Response Matrix, and *latexmath:[$\Delta x$]* is the vector of desired
horizontal beam positions. An analogous relationship also holds for the
vertical plane.

From a control systems view, VME equipment is utilized to digitize BPM 
signals and deliver digital power-supply setpoints to horizontal and vertical
corrector magnets, HCM and VCM, respectively. This may be visualized
as in the <<overview>> figure, below.

[[overview]]
.System overview.
image::SR-view.png["System View"]

The VME crates in all quadrants of the system are under the control of a
single IOC: an "industrial" 3 GHz PC with 1 GB of RAM. The physical 
separation and multi-crate control requirements are satisfied via the Struck
Innovative Systems PCI-VME interface (sis1100/3100). This interface permits
multi-crate control and a high degree of flexibility with respect to VME 
crate and crate-controller positioning.

=== OrbitController ===

==== Structural ====

Structurally, The OrbitControl system is based on a *Model-View-Controller*
architecture (see figure below). The model objects are simply instances of
+Bpm+ or +Ocm+ classes, manipulated via concrete instances of their 
respective controllers, either +BpmController+ or +OcmController+ classes.
These controllers are _interfaces_: C++ classes containing only _pure 
virtual_ methods. It is important to realize that the +OrbitController+ is
_both_ an +OcmController+ *and* a +BpmController+: utilizing
multiple-inheritance, the +OrbitController+ provides implementations for 
both pure-virtual controller classes.

[[MVC-view]]
.MVC Structure of OrbitController system.
image::SR-MVC.png["MVC Structure"]

Conventionally, the "View" in an MVC design is a GUI element such as a
text-field or button. In this case, the "View" is not a specific element, as
the control-points of the software are exposed via Channel Access and
therefore do not require a GUI at all in order to be accessed. In fact, it
is probably more accurate to classify the system as simply a 
Model-Controller architecture, with Channel Access as the interface between
the "Controller" and any conventional GUI widgets that might be utilized.

==== Resource and Concurrency View ====

Upon closer inspection of the architectural details, the classes and 
_active objects_ (i.e. threads) appear as shown below (<<resource-view>>):

[[resource-view]]
.Key classes and threads of the OrbitController system (Mercurial tag v5.0.1).
image::OC-res-concurrency.png["Resource-Concurrency View"]

This representation of the OrbitController illustrates several key concepts:

. *EPICS Device Support Interfaces*: this is the _only_ means by which
a user may control and receive feedback from the system.
. *Active Objects*: These are indicated by their double-barred boxes. For
example, the +AdcReader+ objects. *Note* the _relative_ priorities of the
threads are also indicated (1 is _highest_ priority). Since RTEMS schedules
threads according to a _priority-preemptive_ scheme, this information is
vital to understanding which threads react to certain inputs, and what the
flow of control (context) will be. 
. *Active Object Resources*: these include the _MVC_-"Model" objects, their
containers, their association with their respective +Controller+ interfaces, 
and the objects that are _private_ (in the OOP) sense to the +OrbitController+.

NOTE: The <<resource-view>> above, corresponds to the revision tagged as 
"v5.0.1" in the Mercurial repo. While there are a few important differences
between what is illustrated and what is contained in revision "v3.0.1", the
_structural_ differences are small. Arguably most important are the 
_behavioral_ differences between the two versions: v5.0.1 is capable of 
significantly more rapid orbit-corrections than is v3.0.1, and it scales
better with increased numbers of orbit-corrector magnet channels.

[[FSM-behavior]]
==== Behavioral ====
From the user's perspective, including the newer MatLab control program,
the OrbitController is essentially a _Finite State Machine_ (FSM). 
The runtime behavior of the OrbitController, including
BPM data acquisition and orbit-correction algorithm application, may be 
altered simply by instructing the FSM to transition to one of the
following states:

. *Initializing*: Upon instantiation, the OrbitController sets up its 
hardware from this state. This state cannot be transitioned to from the UI.
. *Standby*: Under certain conditions it may be necessary to cease BPM data
acquisition, but still remain responsive to power-supply inputs originating
from the UI (i.e. caputs to power-supply PVs).
. *Assisted*: This is the behavior of the RTEMS orbit control system as 
present in the 2nd generation system (AKA _slow_ correction). BPM data 
acquisition is _interrupt driven_, yet still periodic at approximately
20 Hz. This mode relies power-supply setpoints to be calculated by and
distributed from the MatLab program, +srorb+. 
. *Autonomous*: In this mode, BPM data acquisition is identical to the 
*Assisted* mode. However, the OrbitController will autonomously calculate
and distribute new power-supply setpoints at the same frequency as data
acquisition occurs (i.e. 20 Hz)
. *Timed*: BPM data acquisition is _timer driven_ in this mode, permitting
faster rates that waiting for FIFO half-full interrupts. As with the 
*Autonomous* mode, the OrbitController applies the orbit-control algorithm
with minimal intervention from other software.
. *Testing*: BPM DAQ is interrupt-driven. However only a _single_
iteration of the acquire-BPM-data-->calculate-and-apply-correction algorithm
 is applied. This mode produces verbose debugging info (new corrector values
are dumped to syslog, so one can verify the algorithm is producing correct 
deltas for the pwr supply updates).

The behavior of the OrbitController is represented in the following image of
the <<FSM>>. However, it should be noted that not all states are depicted in
this image (for purely aesthetic reasons).

[[FSM]]
.OrbitController FSM
image::SR-OC-FSM-v2.png["OrbitController FSM"]

From the developer's point of view, the FSM is implemented using a variation
of the _State Pattern_, as presented in the book, ""Design Patterns: Elements
of Reusable Object-Oriented Software", by Erich Gamma _et al_. This pattern
permits the addition of States by simply sub-classing the appropriate class,
 and implementing the required _abstract_ (pure virtual) methods, 
+stateAction()+, +stateEntry()+, and +stateExit()+.

=== OrbitControlUI ===

The portion of the system that the user sees and interacts with is the 
_OrbitControlUI_, or user-interface. This is simply a set of EPICS records
backed by a set of corresponding Device Support routines. Although the 
average user does not directly interact with the Device Support, it is 
ultimately those pieces of software which inject into and receive data from 
the lower-level RTEMS OrbitController sub-system.

The EPICS Database comprising the user-interface contains approximately 1000
records as of version v3.0.1. This number can be expected to grow to the order
of 1500 when the "slow" sextupole OCMs are added to the OrbitController's 
domain. This surprisingly large number arises because their are 54 BPM sets 
(48 used for corrections) and 48 OCM sets, each with 2 planes of operation.

The next two sections will look in more detail at the BPM and OCM databases.

==== EPICS BPM Database ====

As mentioned, there are 54 sets of BPMs in the storage ring, each of which
provides two, primary process variables: an _x-position_ and a _y-position_, 
represented as +analog input+ (_ai_) records. The OrbitController's 
+BpmControl+ thread simply produces averages of the digitized _x_ and _y_ 
BPM signals collected by the +AdcReader+ threads (see <<resource-view>> 
figure). It is those averages that populate the database records, 
+BPM14aa-bb:x+ and +BPM14aa-bb:y+.

Although not yet utilized by operations, there are also 54 sets of _standard
deviations_ produced for the corresponding _x_ and _y_ BPM average positions.
These are records with names like, +BPM14aa-bb:x:sigma+ or , 
+BPM14aa-bb:y:sigma+. These values are are also calculated by the +BpmControl+
thread.

[[BPM-database]]
.OrbitControllerUI: BPM database.
image::SR-UI-BPM.png["UI BPMs"]

As previously mentioned, the effect of disabling a BPM _x_ or _y_ channel is
not fully understood or dealt with. However, the database +binary-out+ records
with names like, +BPM14aa-bb:isInCorrection+, are intended to provide the 
interface to such functionality. Note that this interface is intended to 
disable *both* the _x_ and _y_ BPM channels _as a unit_.

Two other groups of +analog-output+ records utilized in the orbit-correction 
algorithm are those with names like +BPM14aa-bb:x:ref+ (reference, or 
"Golden Orbit") and +BPM14aa-bb:x:offs+ (offset). These values are typically
set by the MatLab program as part of initializing the system for "fast",
autonomous operations, and are seldom changed during operation. The 
OrbitController linearly combines these numbers with the current BPM
average positions and this result forms the vector, 
*latexmath:[$\Delta x$]*, utilized in the expression,
*latexmath:[$\Delta \theta_x = R^{-1}\Delta x$]*, given previously.

There are three, thus far undiscussed, records remaining in the 
<<BPM-database>> figure. These records may not properly be grouped with
the others of that figure, but their placement is for reasons of 
conciseness. Actually, these records are part of the +OrbitController+'s
interface. Their utility is discussed below:

. +BPM:samplesPerAvg+: controls the number of BPM samples comprising the 
average published in the +BPM14aa-bb:x+ records. Therefore, it also controls
the frequency of publishing (record processing). This is a +longout+-type record.
In any of the so-called "fast" modes of operation, the BPM values will be 
changing too rapidly for Channel Access monitors to keep up with. Yet, UI
programs like +clsorb+ still need relatively real-time BPM values to function.
Therefore, the +BpmControl+ thread triggers CA monitors at a rate determined
by +BPM:samplesPerAvg+, while the autonomous orbit-correction algorithm
operates using only a small, but current fraction of samples for its work.
Note, BPM signals are currently digitized at 10 kHz, so 5000 samples is 0.5 [s].
. +OrbitController:mode+: controls the state of the OrbitController, as
discussed in <<FSM-behavior>>. This is a +multi-bit binary output+ record.
Note, addition or deletion of OrbitController states will need to be reflected
here. Note, there also exists a record that monitors the PCT-value (i.e.
storage-ring current), and sets the OrbitController's mode to +Assisted+
if the value is less than 2.5 mA. This is to assure that the signal-to-noise
(SNR) ratio of the BPMs is large enough to accurately perform corrections to
the beam position.
. +OrbitController:mode:fbk+: feedback on the current state of the 
OrbitController. This is a +multi-bit binary input+ record.

==== EPICS OCM Database ====

As of version v3.0.1 of the OrbitController, the set of "fast" orbit-correctors
consists of 48 OCM. The records controlling the setpoints of the power-supplies
for these have names ending in "*:dac*" (eg: +OCM14aa-bb:dac+). Those records
with the suffix of "*:fbk*" are *not* feedback from the power-supply
channels: they are feedback on the _setpoint values_, as the OrbitController
has no physical means of obtaining true power-supply current values.

[[OCM-database]]
.OrbitControllerUI: OCM database.
image::SR-UI-OCM.png["UI OCMs"]

Once the hardware modifications are in place to incorporate the dual-purpose 
sextupole magnets into the "fast" orbit-correction algorithm, there will need
to be records created to control them. Place-holder values already exist in 
the various "*.sub" (substitution) files, but they are commented out. At this
point, please consult the file, "_orbitcontrolUI/Db/README.OCM.ringOrder_".
It contains crucial further details for this stage of the upgrade process.

The records with names of the pattern, +OCM14aa-bb:delay+, control the amount
of spin-delay (in micro-seconds) required for correct operation of the OCM
setpoint delivery. This delay is necessary, as the VMIC-2536 hardware contains 
optical-isolators with relatively long rise and (especially) fall-times. The
nominal (worst-case) settings of 35 micro-seconds are issued to each channel
upon record initialization, and need *not* be altered.

Enabling and disabling of OCM channels is accomplished via those records with
names like, +OCM14aa-bb:isInCorrection+. Note that this does not actually 
_enable_ or _disable_ a channel, but rather only admits or omits that channel
from participating in the orbit correction algorithm. Thus, the correction
calculated for that channel may or may not be distributed depending on the
setting of these records.

The three remaining families of records in the <<OCM-database>> figure are
not actually associated with any physical OCM channel. They exist to provide
support the mathematical operations of the orbit-control algorithm. Each record
receives it values from the operator's MatLab program. They are briefly 
discussed here:

. +OCM:x/y:responseVector+: These are actually the _inverse_ Response matrices,
as calculated and delivered by the MatLab support software. As EPICS +waveform+
records have no innate support for multiply dimensioned arrays, the values are
arranged in _column order_. So, if the matrix is 48x48, then waveform elements
0-47 are column one, elements 48-95 are column two, and so on. Note, these 
records are infrequently updated, typically once upon initialization,
and never while the orbit-control is active.
. +OCM:x/y:maxStep+: These records are a form of _gain_ control. They throttle the
magnitude of the (absolute) values delivered to each OCM. This limits the size
of correction applied at iteration of the orbit-control algorithm.
. +OCM:x/y:corrFraction+: These records are another form of _gain_ control.
Their values determine what fraction of the correction value is actually
sent to a power-supply channel (OCM). For example, if one channel's 
correction was clipped to the size of +OCM:x:maxStep+, and +OCM:x:corrFraction+
was 0.5, then the correction sent to that channel would be 0.5*+maxStep+.

=== Future Work === 
* The method for dealing with the scenario of disabled BPM and OCM channels
is incomplete in the 3^rd^-generation OrbitControl system. This could be
dealt with in two ways:
. Client-side: The MatLab program has the responsibliity of providing new
inverted Response Matrices to account for the disabled BPM or OCM channel.
This could be as simple as zeroing the appropriate row the matrix.
. OrbitController-side: There are enable/disable +Binary Out+ 
process-variables associated with each BPM and OCM. In the case of the OCMs,
if one is disabled (via a caput), that channel's value is omitted from the 
channel-setpoint distribution process. Dealing with one or more disabled BPMs
is complicated by the fact that they constitute one of the inputs to the 
equation which produces the OCM setpoint corrections.

NOTE: Disabling of OCM or BPM channels via Channel Access has *_NOT_*
been tested !! In any case, the flexibility afforded via the presence of dynamically
adjustable Response Matrices (see section on altering compile-time <<constants>>)
would be well worth their (minimal) implementation effort, especially with 
respect to the solution of the disabled OCM/BPM problem.
 
* The following comments pertain to version v5.0.1 (*only!*) of the OrbitController 
software. The power-supply setpoint distribution algorithm was heavily modified to 
distribute the cost of the spin-delays associated with affecting
setpoint changes (thanks to Neil Johnson for the idea). A behavioral
modification also permits application of the orbit control algorithm based
on the number of ADC frames collected, rather than based on ADC or RTEMS 
Timer interrupts. Coupled with the faster technique of distributing power-
supply setpoints, this change permits application of orbit corrections well
in excess of 100 Hz. However, as stated, this version _has not been tested
on production systems and should only be utilized after proper vetting_.
Also, there is no way of changing, at run-time, the number of ADC frames
that will trigger read-out of the ADCs and application of the orbit-
correction algorithm (see _FastAlgorithm.cc_). However, although the 
_EPICS interface_ does not yet exist to permit run-time alteration of the 
rate of orbit-correction application, the _implementation_ of that 
functionality is already present in the OrbitController. What is required is
a set of +longin+ and +longout+ records for getting and setting (respectively)
the number of ADC-frames collected, and the appropriate Device Support to
interact with the OrbitController instance.  

[[A]]
== Appendix A ==
Thanks to Michael Davidsaver for making a cleaner version of this patch.

----------------------------------------------------------------------------
From 8ea0edb9b6fdf64661a96112467b9672d37c7de7 Mon Sep 17 00:00:00 2001
From: Michael Davidsaver <mdavidsaver@bnl.gov>
Date: Wed, 1 Jul 2009 14:28:04 -0400
Subject: RTEMS Generic System

Optionally build RTEMS generic system loadable objects
---
 configure/os/CONFIG.Common.RTEMS      |   22 +++++++++++++++++++++-
 configure/os/CONFIG_SITE.Common.RTEMS |    6 ++++++
 2 files changed, 27 insertions(+), 1 deletions(-)

diff --git a/configure/os/CONFIG.Common.RTEMS b/configure/os/CONFIG.Common.RTEMS
index 6057484..f2b5bb5 100644
--- a/configure/os/CONFIG.Common.RTEMS
+++ b/configure/os/CONFIG.Common.RTEMS
@@ -81,19 +81,39 @@ OPT_CXXFLAGS_YES = $(CFLAGS_OPTIMIZE_V)
 OPT_CFLAGS_NO    = $(CFLAGS_DEBUG_V)
 OPT_CXXFLAGS_NO  = $(CFLAGS_DEBUG_V)
 
+ifeq ($(USE_GESYS),YES)
+# Give loadable object a different extension
+override EXE=.obj
+STATIC_LDFLAGS_YES=
+
+# Don't product MUNCHed binary (ie myioc.boot)
+override MUNCHNAME=
+override MUNCH_CMD=
+endif
+
 #--------------------------------------------------
 # operating system class (include/os/<os_class>)
 OS_CLASS = RTEMS
 
 #--------------------------------------------------
 # Operating system flags
+OP_SYS_LDFLAGS += $(CPU_CFLAGS)
+ifeq ($(USE_GESYS),YES)
+# Assume all system libraries were linked with the generic image
+OP_SYS_LDLIBS =
+# A Generic object is just a set of objects which have been
+# incrementally linked to create an object.
+# The result is almost the same as a shared library.
+OP_SYS_LDFLAGS += -Wl,-r
+else
 OP_SYS_LDLIBS += -lrtemsCom -lc -lrtemscpu -lCom -lnfs -lm
-OP_SYS_LDFLAGS += $(CPU_CFLAGS) -u Init \
+OP_SYS_LDFLAGS += -u Init \
                  $(PROJECT_RELEASE)/lib/no-dpmem.rel \
                  $(PROJECT_RELEASE)/lib/no-mp.rel \
                  $(PROJECT_RELEASE)/lib/no-part.rel \
                  $(PROJECT_RELEASE)/lib/no-signal.rel \
                  $(PROJECT_RELEASE)/lib/no-rtmon.rel
+endif
 
 #--------------------------------------------------
 # RTEMS has neither shared libraries nor dynamic loading
diff --git a/configure/os/CONFIG_SITE.Common.RTEMS b/configure/os/CONFIG_SITE.Common.RTEMS
index 0133f69..4ff476e 100644
--- a/configure/os/CONFIG_SITE.Common.RTEMS
+++ b/configure/os/CONFIG_SITE.Common.RTEMS
@@ -12,6 +12,12 @@ RTEMS_VERSION ?= 4.9
 #
 RTEMS_PREFIX   ?= $(RTEMS_BASE)/bin/
 
+# Link Generic System loadable objects instead of full executable.
+#
+# A GeSys object is similar to a shared library.  It can be (un)loaded
+# at runtime by the Generic System loader which is available as a
+# patch against RTEMS.
+USE_GESYS=NO
 
 # If you're using neither BOOTP/DHCP nor FLASH to pick up your IOC
 # network configuration you must uncomment and specify your Internet 
-- 
1.5.6.5
----------------------------------------------------------------------------

